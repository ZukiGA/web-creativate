import { Button, useToast } from '@chakra-ui/react'
import ToastError from '@helpers/toast-error'
import ToastSuccess from '@helpers/toast-success'
import login from 'helpers/login'
import {
  LoginData,
  loginDefaultValues as defaultValues,
  LoginFormProps
} from 'interfaces/login'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { useAppDispatch } from 'store/hook'
import { setLoginData } from 'store/reducers/user'
import TextInput from '../input'
import styles from './login.module.css'

const LoginForm = ({
  image,
  homeRoute,
  user,
  forgotPasswordRoute
}: LoginFormProps) => {
  const [isLoading, setIsLoading] = useState(false)
  const router = useRouter()

  const {
    control,
    handleSubmit,
    getValues,
    formState: { errors }
  } = useForm<LoginData>({ defaultValues })

  const dispatch = useAppDispatch()
  const toast = useToast()

  const handleStatus = (status: number, responseData: any) => {
    try {
      if (status === 200 || status === 201 || status === 204) {
        // toast success

        ToastSuccess(toast, responseData.message)

        // set user data
        dispatch(
          setLoginData({
            id: `${getValues('email').split('@')[0]}`,
            token: responseData.token,
            name: responseData.user, // name: responseData.name,
            email: getValues('email'),
            role: user
          })
        )

        // redirect to home
        setTimeout(() => router.push(homeRoute), 500)
      } else {
        // focus on the first input

        const button = document.getElementById('email')
        button?.focus()

        // toast error
        ToastError(toast, responseData.message)

        // set error state
        setIsLoading(false)
      }
    } catch (err) {
      setIsLoading(false)

      ToastError(toast, 'Algo salió mal. Intenta de nuevo')
    }
  }

  const onSubmit = handleSubmit((data) => {
    // Update state
    setIsLoading(true)

    // Call login function
    const formattedUser = `${user}${data.email.substring(0, 9)}`.toLowerCase()

    login(formattedUser, data.password)
      .then(({ status, responseData }) => {
        handleStatus(status, responseData)
      })
      .catch((err) => {
        handleStatus(500, err)
      })
  })

  return (
    <div>
      <Head>
        <title>Inicia sesión</title>
        <meta name="description" content="Generated by Hacket" />
        <link rel="icon" href="/images/icon.ico" />
      </Head>

      <main>
        <form className={styles.mainContainer} onSubmit={onSubmit}>
          <div className={styles.leftCont}>
            <img src={image} className={styles.loginImage} />
          </div>
          <div className={styles.signIn}>
            <div className={styles.paeLogin}>
              <Image
                src="https://firebasestorage.googleapis.com/v0/b/creativate.appspot.com/o/banner%2FLogo%20sin%20fondo.png?alt=media&token=8a339baa-916a-46f4-9699-e9813b926e2c"
                alt="logo"
                priority
                layout="fixed"
                width={177}
                height={157}
              />
              <h1 className={styles.title}>Inicia sesión</h1>
            </div>
            <div className={styles.loginFields}>
              <div className={styles.component}>
                <TextInput
                  name="email"
                  placeholder="CORREO INSTITUCIONAL"
                  control={control}
                  error={errors.email}
                  rules={{
                    required: 'Matrícula requerida',
                    pattern: {
                      value: /^([A,a]{1}[0]{1}[0-9]{7}(@tec\.mx)*)/i,
                      message:
                        'Correo eléctronico inválido. E.g. A0XXXXXXX@tec.mx'
                    }
                  }}
                />
              </div>
              <div className={styles.component}>
                <TextInput
                  name="password"
                  type="password"
                  placeholder="CONTRASEÑA"
                  control={control}
                  error={errors.password}
                  rules={{
                    required: 'Contraseña requerida',
                    minLength: { value: 8, message: 'Contraseña muy corta' }
                  }}
                />
              </div>
              <div className={styles.componentB}>
                <Button
                  disabled={isLoading}
                  isLoading={isLoading}
                  variant="primary"
                  type="submit"
                  color="white"
                  backgroundColor={'#2F44A9'}
                >
                  INICIAR SESION
                </Button>
              </div>
            </div>
            <div className={styles.notUser}>
              <Link href={forgotPasswordRoute}>
                <a className={styles.forgotPassword}>Olvidé mi contraseña</a>
              </Link>
              <h2 className={styles.register}>
                ¿No tienes cuenta?{' '}
                <Link href="/register">
                  <a className={styles.regLink}>Regístrate</a>
                </Link>
              </h2>
              <a href="#" className={styles.privacy}>
                Aviso de privacidad
              </a>
            </div>
          </div>
        </form>
      </main>
    </div>
  )
}

export default LoginForm
