import { useToast } from '@chakra-ui/react'
import Childs from '@components/forms/signin/children'
import Confirmation from '@components/forms/signin/confirmation'
import PersonalDataForm from '@components/forms/signin/personal-data'
import Steps from '@components/forms/signin/steps'
import randomChoose from '@helpers/choose-image'
import ToastError from '@helpers/toast-error'
import ToastSuccess from '@helpers/toast-success'
import { registerUser, setRegisterForm } from '@redux/create-user'
import styles from 'components/forms/login/login.module.css'
import {
  CHILDREN,
  CONFIRMATION,
  PersonalData,
  PERSONAL_DATA
} from 'interfaces/steps'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import { useAppDispatch } from 'store/hook'

export default function SignIn() {
  const image = randomChoose()

  const toast = useToast()
  const router = useRouter()
  const { query, push } = router
  //   const error = useAppSelector(selectError)
  const dispatch = useAppDispatch()
  const [step, setStep] = useState<string>(PERSONAL_DATA)
  const [isPersonalDataComplete, setIsPersonalDataComplete] = useState(true)
  const [isChildrenComplete, setIsChildrenComplete] = useState(false)
  const [isConfirmationComplete, setIsConfirmationComplete] = useState(false)

  const handleSteps = (clickedStep: string | undefined | string[]) => {
    let newStep = step
    if (clickedStep === step) {
      newStep = clickedStep
      setStep(clickedStep)
    } else if (clickedStep === PERSONAL_DATA) {
      newStep = PERSONAL_DATA
      setStep(PERSONAL_DATA)
    } else if (clickedStep === CHILDREN && isConfirmationComplete) {
      newStep = CHILDREN
      setStep(CHILDREN)
    } else if (clickedStep === CONFIRMATION && isChildrenComplete) {
      newStep = CONFIRMATION
      setStep(CONFIRMATION)
    }

    const href = {
      pathname: '/signin',
      query: { step: newStep }
    }
    push(href)
  }

  useEffect(() => {
    // console.log(query.step);
    handleSteps(query.step)
  }, [])

  const handleNextStep = () => {
    if (step === PERSONAL_DATA) {
      setIsConfirmationComplete(true)
      setStep(CHILDREN)
      router.push(`/signin/?step=${CHILDREN}`)
    } else if (step === CHILDREN) {
      setIsChildrenComplete(true)
      router.push(`/signin/?step=${CONFIRMATION}`)
      setStep(CONFIRMATION)
    }
  }

  const saveData = (data: PersonalData) => {
    dispatch(setRegisterForm(data))
    handleNextStep()
  }

  const concludeRegistration = async () => {
    try {
      const { status } = await dispatch(registerUser()).unwrap()
      if (status === 200 || status === 201 || status === 204) {
        ToastSuccess(toast, 'Registro exitoso. Ahora puedes iniciar sesión')

        router.push('/tutor/register-confirmation')
      } else {
        ToastError(toast, 'Algo salió mal. Intenta de nuevo')
      }
    } catch (err: any) {
      ToastError(toast, err.message)
    }
  }

  const handleComponent = () => {
    switch (step) {
      case PERSONAL_DATA:
        return <PersonalDataForm nextStep={(data) => saveData(data)} />
      case CHILDREN:
        return <Childs nextStep={handleNextStep} />
      case CONFIRMATION:
        return <Confirmation nextStep={concludeRegistration} />
      default:
    }
  }
  return (
    <div>
      <Head>
        <title>Registro</title>
        <meta name="description" content="Generated by Hacket" />
        <link rel="icon" href="/images/icon.ico" />
      </Head>
      <div className={styles.mainContainer}>
        <div className={styles.leftCont}>
          <img src={image} className={styles.loginImage} />
        </div>
        <div className={styles.signIn}>
          <h1 className={styles.title} style={{ marginBottom: '40px' }}>
            Registro
          </h1>
          <Steps
            currentRoute={query.step}
            handleStep={handleSteps}
            isPersonalDataComplete={isPersonalDataComplete}
            isChildrenComplete={isChildrenComplete}
            isConfirmationComplete={isConfirmationComplete}
          />
          {handleComponent()}
        </div>
      </div>
    </div>
  )
}
